"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config # Adicionado

# Import condicional do dj_database_url (só se estiver instalado)
try:
    import dj_database_url
except ImportError:
    dj_database_url = None

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='uma_chave_secreta_local_padrao_deve_ser_forte') # Modificado

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=True, cast=bool) # Modificado

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1,.vercel.app').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # <--- ADICIONE ESTA LINHA
    'rest_framework',
    'api', # Nosso app da API
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Adicionar WhiteNoise para servir estáticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # <--- ADICIONE ESTA LINHA
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Configuração para produção (Vercel) e desenvolvimento local.
# Se a variável de ambiente DATABASE_URL estiver definida (em produção no Vercel),
# usaremos o PostgreSQL. Caso contrário, usaremos SQLite para desenvolvimento local.
DATABASE_URL_FROM_ENV = config('DATABASE_URL', default=None) # Modificado para usar config

if DATABASE_URL_FROM_ENV and dj_database_url:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL_FROM_ENV, # Usar a variável já lida
            conn_max_age=600,
            conn_health_checks=True, # Adicionado pelo guia
            ssl_require=config('DJANGO_DB_SSL_REQUIRE', default=True, cast=bool) # Mantendo flexibilidade para SSL
        )
    }
    # A configuração de 'sslmode': 'require' é geralmente tratada pelo dj_database_url se a URL incluir ?sslmode=require
    # ou pode ser passada via 'OPTIONS'. Se dj_database_url.config não lida com isso automaticamente
    # baseado na string de conexão, e você precisa forçar, pode ser necessário adicionar:
    # DATABASES['default']['OPTIONS'] = {'sslmode': 'require'}
    # No entanto, o Vercel Postgres geralmente inclui sslmode=require na DATABASE_URL.
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Configurações para servir arquivos estáticos em produção
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Django 4.2+ STORAGES configuration
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração da URL da API do ExternalProvider-Server
EXTERNAL_PROVIDER_API_URL = os.getenv('EXTERNAL_PROVIDER_API_URL') or ''
EXTERNAL_PROVIDER_BASE_URL = os.getenv('EXTERNAL_PROVIDER_BASE_URL') or ''
EXTERNAL_PROVIDER_API_URL_2 = os.getenv('EXTERNAL_PROVIDER_API_URL_2') or ''
EXTERNAL_PROVIDER_BASE_URL_2 = os.getenv('EXTERNAL_PROVIDER_BASE_URL_2') or ''

# Configurações do Django REST framework (opcional, mas bom para ter)
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny' # Ou mais restritivo, conforme necessário
    ]
}

# Carrega a string de origens permitidas do .env
cors_origins_csv = os.getenv('DJANGO_CORS_ALLOWED_ORIGINS_CSV', '')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_csv.split(',') if origin.strip()]

# Fallback para desenvolvimento local se DJANGO_CORS_ALLOWED_ORIGINS_CSV não estiver definido ou estiver vazio
if not CORS_ALLOWED_ORIGINS and DEBUG:
    CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]
    print("AVISO: DJANGO_CORS_ALLOWED_ORIGINS_CSV não definido ou vazio no .env. Usando fallback: [\"http://localhost:3000\"]")
elif not CORS_ALLOWED_ORIGINS and not DEBUG:
    print("ERRO: DJANGO_CORS_ALLOWED_ORIGINS_CSV não definido ou vazio no .env e DEBUG é False. Nenhuma origem CORS será permitida.")
    # Em um cenário de produção real, você pode querer lançar um erro ou ter uma lista padrão mais restrita.

# Permitir cookies em requisições CORS se necessário
CORS_ALLOW_CREDENTIALS = True

# Headers permitidos
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
]

# === Configurações de Rate Limiting ===
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'  # Use Redis em produção
RATELIMIT_VIEW = 'api.views.rate_limited'

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
    } if os.getenv('REDIS_URL') else {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Configurações customizadas do ExternalProvider
RATE_LIMIT_PER_MINUTE = int(os.getenv('RATE_LIMIT_PER_MINUTE') or '60')
EXTERNAL_PROVIDER_TIMEOUT = int(os.getenv('EXTERNAL_PROVIDER_TIMEOUT') or '30')


# Configurações de segurança para produção
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'
    
    # Configurações adicionais de segurança
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Adicionado para cache de sessão em produção
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# Configuração de Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if not DEBUG else ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'api': {  # Log específico para nossa API
            'handlers': ['console', 'file'] if not DEBUG else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# Configurações adicionais para produção
# Removida a lógica duplicada de DATABASES['default']['OPTIONS'] para sslmode,
# pois idealmente dj_database_url.config com ssl_require=True ou a própria DATABASE_URL já cuidam disso.
# Se o Vercel Postgres sempre fornecer uma URL com sslmode=require, a opção ssl_require em dj_database_url.config
# pode ser suficiente ou até mesmo desnecessária se a URL já for completa.
# A configuração original era:
# if os.getenv('DATABASE_URL'):
#     DATABASES['default']['OPTIONS'] = {
#         'sslmode': 'require',
#     }

# Timeout para requisições HTTP
DEFAULT_HTTP_TIMEOUT = int(os.getenv('DEFAULT_HTTP_TIMEOUT') or '30')

# Configurações de email (se necessário no futuro)
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
if not DEBUG:
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@cubari-proxy.com')
    SERVER_EMAIL = os.getenv('SERVER_EMAIL', DEFAULT_FROM_EMAIL)
